{"version":3,"sources":["graphql/client.js","components/LoadingButton.js","screens/Todos.js","screens/Login.js","App.js","reportWebVitals.js","index.js"],"names":["httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","LoadingButton","React","memo","props","isSubmitting","useFormikContext","Button","disabled","children","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","USER_QUERY","gql","TODOS_QUERY","ADD_TODO_MUTATION","COMPLETE_TODO_MUTATION","REMOVE_TODO_MUTATION","classes","history","useHistory","useState","search","setSearch","useMutation","addTodo","completeTodo","removeTodo","userData","useQuery","data","error","loading","refetch","email","get","console","log","clickCompleteTodoButton","todo","a","variables","_id","clickRemoveTodoButton","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","Link","href","onClick","e","preventDefault","removeItem","go","TextField","type","placeholder","fullWidth","onChange","target","value","style","List","todos","filter","description","includes","map","ListItem","button","ListItemText","primary","textDecoration","complete","ListItemSecondaryAction","IconButton","edge","aria-label","initialValues","onSubmit","values","setSubmitting","resetForm","noValidate","name","required","autoComplete","autoFocus","color","LOGIN_MUTATION","LOGIN_GOOGLE_MUTATION","Login","login","loginGoogle","responseGoogle","dataGoogle","response","tokenId","result","setItem","push","password","marginBottom","clientId","buttonText","onSuccess","onFailure","cookiePolicy","App","PrivateRoute","rest","auth","render","location","to","pathname","state","from","utils","DateFnsUtils","path","Todos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ab192b5.chunk.js","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'\r\nimport { setContext } from '@apollo/client/link/context'\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: `${process.env.REACT_APP_URL}/graphql`,\r\n})\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('token');\r\n  // return the headers to the context so httpLink can read them\r\n\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n\r\nexport default client","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Progress from '@material-ui/core/CircularProgress'\r\nimport { useFormikContext } from 'formik'\r\n\r\n// todo: shouldn't rerender without prop change\r\nconst LoadingButton = React.memo((props) => {\r\n  const { isSubmitting } = useFormikContext()\r\n\r\n  return (\r\n    <Button\r\n      {...props}\r\n      disabled={isSubmitting}\r\n      >\r\n      {!isSubmitting && props.children}\r\n      {isSubmitting && <Progress />}\r\n    </Button>\r\n  )\r\n})\r\n\r\nexport default LoadingButton","import React, { useEffect, useState, useRef } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\n// import { LoadingButton } from '@material-ui/lab'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextFieldUI from '@material-ui/core/TextField'\r\nimport { TextField } from 'formik-material-ui'\r\nimport { DatePicker } from 'formik-material-ui-pickers'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { gql, useQuery, useMutation } from '@apollo/client'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { get } from 'lodash'\r\nimport client from '../graphql/client'\r\nimport LoadingButton from '../components/LoadingButton'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst USER_QUERY = gql`\r\n  query User {\r\n    user {\r\n      _id\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nconst TODOS_QUERY = gql`\r\n  query Todos {\r\n    todos {\r\n      _id\r\n      description\r\n      complete\r\n      createdAt\r\n    }\r\n  }\r\n  `\r\n\r\nconst ADD_TODO_MUTATION = gql`\r\n  mutation AddTodo($description: String!) {\r\n    addTodo(description: $description) {\r\n      _id\r\n      description\r\n      complete\r\n      createdAt\r\n    }\r\n  }\r\n`\r\n\r\nconst COMPLETE_TODO_MUTATION = gql`\r\n  mutation CompleteTodo($_id: ID!) {\r\n    completeTodo(_id: $_id) {\r\n      _id\r\n      description\r\n      complete\r\n      createdAt\r\n    }\r\n  }\r\n`\r\n\r\nconst REMOVE_TODO_MUTATION = gql`\r\n  mutation RemoveTodo($_id: ID!) {\r\n    removeTodo(_id: $_id) {\r\n      _id\r\n      description\r\n      complete\r\n      createdAt\r\n    }\r\n  }\r\n`\r\n\r\n\r\nexport default (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory()\r\n  const [search, setSearch] = useState('')\r\n  const [addTodo] = useMutation(ADD_TODO_MUTATION)\r\n  const [completeTodo] = useMutation(COMPLETE_TODO_MUTATION)\r\n  const [removeTodo] = useMutation(REMOVE_TODO_MUTATION)\r\n  const { data: userData } = useQuery(USER_QUERY)\r\n  const { loading, error, data, refetch } = useQuery(TODOS_QUERY)\r\n\r\n  const email = get(userData, 'user.email')\r\n\r\n  if (error) {\r\n    console.log('error', error)\r\n  }\r\n\r\n  const clickCompleteTodoButton = async (todo) => {\r\n    const result = await completeTodo({ variables: {\r\n      _id: todo._id\r\n    }})\r\n\r\n    refetch()\r\n  }\r\n\r\n  const clickRemoveTodoButton = async (todo) => {\r\n    const result = await removeTodo({ variables: {\r\n      _id: todo._id\r\n    }})\r\n\r\n    // todo is removed so update them\r\n    refetch()\r\n  }\r\n\r\n  const logout = (e) => {\r\n    e.preventDefault()\r\n    localStorage.removeItem('token')\r\n    history.go(0)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <FormatListBulletedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Todos\r\n        </Typography>\r\n        {email && (\r\n          <Typography component=\"h2\" variant=\"h6\">\r\n            {email}\r\n            &nbsp;<Link href=\"#\" onClick={logout}>logout</Link>\r\n          </Typography>\r\n        )}\r\n\r\n        <TextFieldUI\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          fullWidth\r\n          onChange={e => setSearch(e.target.value)}\r\n          style={{marginTop: 20}}\r\n          />\r\n\r\n        <List style={{ width: '100%', marginTop: 20 }}>\r\n          {data && data.todos && data.todos\r\n            .filter(todo => {\r\n              return todo.description.includes(search)\r\n            })\r\n            .map(todo => (\r\n            <ListItem key={todo._id} button onClick={() => clickCompleteTodoButton(todo)}>\r\n              <ListItemText\r\n                primary={todo.description}\r\n                style={{ textDecoration: todo.complete ? 'line-through' : 'none' }}\r\n              />\r\n              <ListItemSecondaryAction>\r\n                <IconButton\r\n                  onClick={() => clickRemoveTodoButton(todo)}\r\n                  edge=\"end\"\r\n                  aria-label=\"delete\">\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n\r\n        <Formik\r\n          initialValues={{\r\n            description: '',\r\n            // dueDate: null,\r\n          }}\r\n          onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n            const todos = await addTodo({ variables: values })\r\n\r\n            // todo: could add to the instantly\r\n            refetch()\r\n\r\n            resetForm()\r\n            setSubmitting(true)\r\n          }}\r\n          >\r\n          <Form className={classes.form} noValidate>\r\n            <Field\r\n              name=\"description\"\r\n              component={TextField}\r\n              placeholder=\"Add a todo\"\r\n              fullWidth\r\n              required\r\n              autoComplete=\"todo\"\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              />\r\n\r\n            {/*<Field\r\n              component={DatePicker}\r\n              label=\"Due Date\"\r\n              name=\"dueDate\"\r\n              clearable\r\n              variant=\"outlined\"\r\n            />*/}\r\n\r\n            <LoadingButton\r\n              style={{marginTop: 0}}\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Add\r\n            </LoadingButton>\r\n          </Form>\r\n        </Formik>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { TextField } from 'formik-material-ui'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { get } from 'lodash'\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport client from '../graphql/client'\r\nimport LoadingButton from '../components/LoadingButton'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      _id\r\n      token\r\n    }\r\n  }\r\n  `\r\n\r\nconst LOGIN_GOOGLE_MUTATION = gql`\r\n  mutation LoginGoogle($token: String!) {\r\n    loginGoogle(token: $token) {\r\n      _id\r\n      token\r\n    }\r\n  }\r\n  `\r\n\r\nexport default function Login() {\r\n  const classes = useStyles();\r\n  const history = useHistory()\r\n  const [login, { data }] = useMutation(LOGIN_MUTATION)\r\n  const [loginGoogle, { dataGoogle }] = useMutation(LOGIN_GOOGLE_MUTATION)\r\n\r\n  const responseGoogle = async (response) => {\r\n    const email = get(response, 'profileObj.email')\r\n    const tokenId = get(response, 'tokenId')\r\n\r\n    const result = await loginGoogle({ variables: { token: tokenId }})\r\n    \r\n    // check if we have successful login\r\n    const token = get(result, 'data.loginGoogle.token')\r\n    if (token) {\r\n      localStorage.setItem('token', token)\r\n      history.push('/')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: '',\r\n          }}\r\n          onSubmit={async (values, { setSubmitting }) => {\r\n            // todo put in a try/catch\r\n            const result = await login({ variables: { ...values }})\r\n            const token = get(result, 'data.login.token')\r\n            if (token) {\r\n              // store token locally\r\n              localStorage.setItem('token', token)\r\n\r\n              // redirect home (dashboard)\r\n              history.push('/')\r\n            }\r\n            setSubmitting(false)\r\n          }}\r\n          >\r\n          <Form className={classes.form} noValidate>\r\n            <Field\r\n              name=\"email\"\r\n              component={TextField}\r\n              placeholder=\"Email Address\"\r\n              fullWidth\r\n              required\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              />\r\n            <Field\r\n              name=\"password\"\r\n              component={TextField}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              fullWidth\r\n              required\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              />\r\n            <LoadingButton\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Sign Up / Login\r\n            </LoadingButton>\r\n          </Form>\r\n        </Formik>\r\n\r\n        <p style={{marginBottom: 25}}>or</p>\r\n\r\n        <GoogleLogin\r\n          clientId=\"437227484786-h2tdsihqrvgbl2qda0nvkf42ri4e2nct.apps.googleusercontent.com\"\r\n          buttonText=\"Login with Google\"\r\n          onSuccess={responseGoogle}\r\n          onFailure={responseGoogle}\r\n          cookiePolicy={'single_host_origin'}\r\n          />\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import { ApolloProvider } from '@apollo/client'\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns';\nimport './App.css';\nimport client from './graphql/client'\nimport Todos from './screens/Todos'\nimport Login from './screens/Login'\n\nfunction App() {\n\n  const PrivateRoute = ({ children, ...rest }) => {\n    // check if has token, this is safe since server validates token\n    const auth = localStorage.getItem('token')\n\n    return (\n      <Route\n        {...rest}\n        render={({ location }) => {\n          return (\n            auth ? children :\n            <Redirect\n              to={{\n                pathname: '/login',\n                state: { from: location }\n              }}\n            />\n          )\n        }}\n      />\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Router>\n            <Switch>\n              <Route path=\"/login\">\n                <Login />        \n              </Route>\n              <PrivateRoute path=\"/\">\n                <Todos />\n              </PrivateRoute>\n            </Switch>\n          </Router>\n        </MuiPickersUtilsProvider>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}